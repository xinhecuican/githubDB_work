#!/usr/bin/env python

import multiprocessing
from PyTango import AttrWriteType, DispLevel, Except, ErrSeverity
from PyTango.server import (Device, DeviceMeta, attribute, device_property,
                            command, server_run)


class _DataProcess(multiprocessing.Process):

    def __init__(self, json):
        super(_DataProcess, self).__init__()
        self.json = json

    def run(self):
        from gi.repository import Ufo, GLib

        try:
            pm = Ufo.PluginManager()
            g = Ufo.TaskGraph()
            g.read_from_data(pm, self.json)

            self.log("Processing data ...")
            sched = Ufo.Scheduler()
            sched.run(g)
            self.log("Done.")
        except GLib.GError as e:
            self.log("Error: {}".format(e.message))

    def log(self, s):
        print("{}: {}".format(self.name, s))


class Process(Device):
    __metaclass__ = DeviceMeta

    jobs = attribute(label="Jobs", dtype=int,
                    display_level=DispLevel.OPERATOR,
                    access=AttrWriteType.READ,
                    doc="Number of running jobs")

    json = attribute(label="JSON", dtype=str,
                    display_level=DispLevel.OPERATOR,
                    access=AttrWriteType.READ_WRITE,
                    doc="JSON description")

    def init_device(self):
        Device.init_device(self)
        self._jobs = {}
        self._json = "{}"

    def read_jobs(self):
        return len([job for job in self._jobs.values() if job.is_alive()])

    def read_json(self):
        return self._json

    def write_json(self, json):
        self._json = json

    @command(dtype_out=int, doc_out="Job ID")
    def Run(self):
        process = _DataProcess(self._json)
        process.start()
        self._jobs[process.pid] = process
        return process.pid

    @command(dtype_in=int, doc_in="Job ID",
             dtype_out=bool, doc_out="True if still running")
    def Running(self, job_id):
        if job_id not in self._jobs:
            Except.throw_exception("Unknown job ID", "Unknown job ID", "Here", ErrSeverity.ERR)
        else:
            return self._jobs[job_id].is_alive()


if __name__ == '__main__':
    server_run((Process,))
